#This file is for the design of neural network for face point deteciton

name:"FPDetection"

layers{
	name:"data"
	type:HDF5_DATA 
	top:"data"
	top:"label"
	hdf5_data_param{
		source:"/home/feixuan/caffe-master/data/fp/train_data_list.txt"
		batch_size:80
	}
	include:{phase:TRAIN}
}

layers{
	name:"data"
	type:HDF5_DATA 
	top:"data"
	top:"label"
	hdf5_data_param{
		source:"/home/feixuan/caffe-master/data/fp/test_data_list.txt"
		batch_size:80
	}
	include:{phase:TEST}
}

layers{
	name:"conv1"
	type: CONVOLUTION
	bottom:"data"
	top:"conv1"
	convolution_param{
		num_output:20
		kernel_size:4
		stride:1
		weight_filler{
			type:"gaussian"
			std:0.01
		}
		bias_filler{
			type:"constant"
			value:1
		}
	}
}

layers{
	name:"tanh1"
	type: TANH
	bottom:"conv1"
	top:"conv1"
}

layers{
	name:"pool1"
	type: POOLING
	bottom:"conv1"
	top:"pool1"
	pooling_param{
		pool:MAX
		kernel_size:2
		stride:2
	}
}

layers{
	name:"norm1"
	type: LRN
	bottom:"pool1"
	top:"norm1"
	lrn_param{
		local_size:3
		alpha:0.0001
		beta:0.75
	}
}

layers{
	name:"conv2"
	type: CONVOLUTION
	bottom:"norm1"
	top:"conv2"
	convolution_param{
		num_output:40
		kernel_size:3
		stride:1
		weight_filler{
			type:"gaussian"
			std:0.01
		}
		bias_filler{
			type:"constant"

		}
	}
}


layers{
	name:"tanh2"
	type:TANH
	bottom:"conv2"
	top:"conv2"
}

layers{
	name:"pool2"
	type:POOLING
	bottom:"conv2"
	top:"pool2"
	pooling_param{
		pool:MAX
		kernel_size:2
		stride:2
	}
}

layers{
	name:"norm2"
	type:LRN
	bottom:"pool2"
	top:"norm2"
	lrn_param{
		local_size:3
		alpha:0.0001
		beta:0.75
	}
}


layers{
	name:"conv3"
	type: CONVOLUTION
	bottom:"norm2"
	top:"conv3"
	convolution_param{
		num_output:60
		kernel_size:3
		stride:1
		weight_filler{
			type:"gaussian"
			std:0.01
		}
		bias_filler{
			type:"constant"
			value:1
		}
	}
}


layers{
	name:"tanh3"
	type:TANH
	bottom:"conv3"
	top:"conv3"
}

layers{
	name:"pool3"
	type:POOLING
	bottom:"conv3"
	top:"pool3"
	pooling_param{
		pool:MAX
		kernel_size:2
		stride:2
	}
}

layers{
	name:"conv4"
	type: CONVOLUTION
	bottom:"pool3"
	top:"conv4"
	convolution_param{
		num_output:80
		kernel_size:2
		stride:1
		weight_filler{
			type:"gaussian"
			std:0.01
		}
		bias_filler{
			type:"constant"
			value:1
		}
	}
}

layers{
	name:"fc5"
	type:INNER_PRODUCT
	bottom:"conv4"
	top:"fc5"
	blobs_lr:1
	blobs_lr:2
	weight_decay:1
	weight_decay:0
	inner_product_param{
		num_output:120
		weight_filler
		{
			type:"gaussian"
			std:0.01
		}
		bias_filler
		{
			type:"constant"
			value:1
		}
	}
}


#可加入RELU层和 dropout层


layers{
	name:"fc6"
	type:INNER_PRODUCT
	bottom:"fc5"
	top:"fc6"
	blobs_lr:1
	blobs_lr:2
	weight_decay:1
	weight_decay:0
	inner_product_param{
		num_output:10
		weight_filler
		{
			type:"gaussian"
			std:0.01
		}
		bias_filler
		{
			type:"constant"
			value:1
		}
	}
}



#训练阶段对应 loss层
layers{
	name:"loss"
	type:EUCLIDEAN_LOSS
	bottom:"fc6"
	bottom:"label"	
	top:"loss"
}



